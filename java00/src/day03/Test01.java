package day03;

import java.util.*;
public class Test01 {
/*
 	제어명령 
 		==> 컴퓨터는 원칙적으로 코드를 실행할때 순서대로 실행함을 원직으로 한다.
 			(위에서 아래로, 왼쪽에서 오른쪽으로 읽어서 실행을 한다.)
 			그런데! 프로그램을 제작 하다보면 이 순서가 바뀌어야 하는 경우가 발생 한다.
 			이 경우 사용 하는 명령이 제어 명령이다.
 			
 		종류]
 			1. 조건 제어명령
 				==> 특정 조건에 따라서 실행 순서를 변경하는 명령
 				
 				형식 1] ==> 조건식이 참일 경우만 실행 
 						==> 거짓일 경우 처리 내용은 없다! 그냥 건너 뛴다
 					(1)
 					if(조건식-(2) {
 						처리내용.... -(3) 
 					}
 					 -(4)
 					 
 					 조건식이 참일경우 : 1 -> 2 -> 3 -> 4
 					 조건식이 거짓일 경우  : 1-> 2-> 4
 					
 				형식 2]
 					==> 조건식이 참일 경우와 거짓일 경우의 처리내용을 모두 기술해 놓는 조건문
 					
 					(1)
 					if(조건식-(2)){
 						실행문1... - (3) <== 참일경우 실행부
 					}else {
 						실행문2... - (4) <== 거짓일 때 실행부
 					}
 					- (5)
 					
 					조건이 참일경우 : 1 - 2 -3 -5 
 					조건이 거짓일 경우 : 1 - 2 - 4- 5
 					
 				형식 3]
 					==> 두가지 이상의 조건식을 주고 각 조건이 맞는 경우 처리내용을 정의 해 놓는 실행문
 				
 					(1)
 					if(조건식 - (2)) {
 						실행문 1 - (3)
 					} else if(조건식2 -(4)){
 						실행문 2 - (5)
 						...
 					} else if(조건식n-(n)){
 						실행문 n - (6)
 					} else {
 						실행문 m - &-(8)
 					}
					(9)
					
					==> 조건1이 참일경우 : 1 -> 2 ->3 ->9
 					==> 조건2가 참이면 : 1 -> 2 -> 4 -> 5 -> 9
 					==> 조건n이 참이면 : 1 -> 2 -> .... -> n -> 6 -> 9
 					==> 모든 조건이 거짓 일 경우 : 1 -> 2 -> .... -> n -> 8 -> 9 
 				
 				참고]
 					제어명령은 중첩해서 중첩해서 사용가능 하다.
 					
 					예]
 						if(조건1) {
 							if(조건2){
 							
 							} else {
 							
 							}
 						}else{
 							if(조건3) {
 							
 							}else{
 							
 							}
 						}
 				형식 4]
 					switch ~ case
 						==> 다중 조건식 이라고도 말하며
 							여러개의 질문을 차례로 처리할 수 있는 명령이다.
 							
 							****
 							주의]
 								switch ~ case 문에서는 case 문 맨 아래쪽에 반드시  
 								break; 명령을 기술해야 한다.
 								
 							형식]
 								(1)
 								switch(비교내용 - (2)){
 									case 데이터1:	-(3) 
 											실행문1; - (4)
 											break; -(5)
 											
 									case 데이터2: 	-(6)
 											실행문2; -(7)
 											break; 	 -(8)
 											
 									....
 									
 									default: 
 										실행문 n;	-(9) 
 								
 								}
 									- (10)
 									
 									순서]
 										비교내용과 데이터1이 같을 경우
 										1 -> 2 -> 3 -> 4 -> 5 -> 10
 										비교내용과 데이터2이 같을 경우
 										1 -> 2 -> 3 -> 6 -> 7 -> 8 ->  10
 										비교내용과 일치하는 데이터가 없는 경우
 										1 -> 2 -> 3 -> 6 -> 9 -> 10 
 			2. 반복 제어명령
 				
 */
	
	//예제 ] 숫자 2개를 입력 받아서 큰수에 작은수를 뺀 차를 출력하세요
	
	
	public Test01() {
		solv2();
	}
	
	public void solv() {
		//입력 받을 준비 
		Scanner sc = new Scanner(System.in);
		//입력 받을 메세지 출력
		//숫자 입력받아 변수에 담고 
		System.out.print("정수1 를 입력하세요 : ");
		int no1 = sc.nextInt();
		System.out.print("정수2 를 입력하세요 : ");
		int no2 = sc.nextInt();
		
		int cha = 0;
		//크기 비교 
		//블록안에 만들어진 변수는 외부에서는 사용 못하므로 
		//차를 저장할 변수는 조건문 밖에 만들어 주자
		if(no1 > no2) {
		  cha = no1 - no2;
		  System.out.println(no1 + " 와 " + no2 +" 의 차는 " +cha +" 입니다");
			
		}else {
		  cha = no2 - no1;
		  System.out.println(no2 + " 와 " +no1+ " 의 차는 "+ cha + " 입니다");
		}
		//출력
	}
	/*
	 * 	심화 문제]
	 * 		큰수와 작은수를 구분하는 변수를 하나만 들어서 (int tmp)
	 * 		큰수와 작은수를 구분하시여 
	 * 
	 */
	
	public void solv2() {
		
		Scanner sc = new Scanner(System.in);
 
		System.out.print("정수1 를 입력하세요 : ");
		int no1 = sc.nextInt();
		System.out.print("정수2 를 입력하세요 : ");
		int no2 = sc.nextInt();
		
		int cha = 0;
		int tmp = 0;
		
		if(no1 > no2) {
			
			cha = no1 - no2;
	
			
		}else {
			cha = no2 - no1;

		}
		
		if(no2 > no1) {
			tmp = no1;
			no1 = no2;
			no2 = tmp;
		}
		
		//출력
		System.out.println(no1 + " 와 " + no2 +" 의 차는 " +cha +" 입니다");
	}

	public static void main(String[] args) {
		new Test01();

	}

}
